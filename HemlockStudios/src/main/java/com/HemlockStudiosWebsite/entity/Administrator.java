/**
 * The Administrator class represents an entity in the Hemlock Studios Website application with
 * properties such as id, username, email, password, and adminId.
 */
package com.HemlockStudiosWebsite.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

// The `@Entity` annotation is used to mark the `Administrator` class as an entity in the Hemlock
// Studios Website application. This annotation tells the Java Persistence API (JPA) that this class
// represents a table in the database.
@Entity

// The `@Table(name = "administrator")` annotation is used to specify the name of the database table
// that the `Administrator` entity is mapped to. In this case, it is specifying that the entity should
// be mapped to a table named "administrator" in the database.
@Table(name = "administrator")
public class Administrator {
    
    @Id
  // The `@Column(name = "id")` annotation is used to specify the mapping between the `id` field in the
  // `Administrator` class and the corresponding column in the database table. In this case, it is
  // specifying that the `id` field should be mapped to a column named "id" in the database table.
  
    @Column(name = "id")
    
 // The `@GeneratedValue(strategy = GenerationType.IDENTITY)` annotation is used to specify the
 // generation strategy for the `id` field in the `Administrator` class. In this case, it is set to
 // `GenerationType.IDENTITY`, which means that the `id` value will be automatically generated by the
 // underlying database when a new record is inserted. The `id` field is marked as `Integer` to
 // indicate that it is an auto-incrementing primary key in the database table.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    // The `@Column` annotation is used to specify the mapping between a field or property and a column
    // in the database table. In this case, `@Column(name="username", unique=true, nullable = false)`
    // is specifying that the `username` field should be mapped to a column named "username" in the
    // database table.
    @Column(name="username", unique=true, nullable = false)
    private String username;
    // The `@Column(name = "email", unique = true, nullable = false)` annotation is used to specify the
    // mapping between the `email` field in the `Administrator` class and the corresponding column in
    // the database table.
    @Column(name = "email", unique = true, nullable = false)
    private String email;
    // The `@Column(name = "password", nullable = false)` annotation is used to specify the mapping
    // between the `password` field in the `Administrator` class and the corresponding column in the
    // database table.
    @Column(name = "password", nullable = false)
    private String password;
   // The `@Column(name = "admin_id", unique=true, nullable = false)` annotation is used to specify the
   // mapping between the `adminId` field in the `Administrator` class and the corresponding column in
   // the database table.
    @Column(name = "admin_id", unique=true, nullable = false)
    private String adminId;
    
    
    public Administrator() {
    }

    public String adminId() {
        return adminId;
    }

    public void adminId(String adminId) {
        this.adminId = adminId;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getAdminId() {
        return adminId;
    }

    public void setAdminId(String adminId) {
        this.adminId = adminId;
    }

    public Integer getId() {
        return id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
    @Override
    public String toString() {
        return "Administrator [id=" + id + ", username=" + username + ", email=" + email + ", password=" + password
                + ", adminId=" + adminId + "]";
    }
}
