/**
 * The News class represents a news article with properties such as date published, announcement type,
 * title, description, body, and a list of photos.
 */
package com.HemlockStudiosWebsite.entity;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import com.HemlockStudiosWebsite.enums.NewsEnums;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
// The `@Table(name="news")` annotation is used to specify the name of the database table that will be
// mapped to the `News` entity. In this case, the table name is "news".
@Table(name="news")
public class News {
    
  // The `@Id` annotation is used to mark the `id` field as the primary key of the `News` entity.
    @Id
    @Column(name = "id")

    // The `@GeneratedValue(strategy = GenerationType.IDENTITY)` annotation is used to specify the
    // generation strategy for the `id` field in the `News` entity. In this case, it is set to
    // `GenerationType.IDENTITY`, which means that the `id` values will be automatically generated by
    // the underlying database. The database will assign a unique identifier to each new row inserted
    // into the table.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    // The `@Column(name = "date_published")` annotation is used to specify the mapping of the
    // `datePublished` field to a column in the database table. In this case, the column name in the
    // database table will be "date_published". This annotation is used in conjunction with the
    // `@Entity` annotation to define the mapping between the Java object and the database table.
    @Column (name = "date_published")
    private LocalDate datePublished;
    
    // The `@Enumerated(EnumType.STRING)` annotation is used to specify how the `anouncement` field
    // should be persisted in the database. In this case, it is set to `EnumType.STRING`, which means
    // that the enum value will be stored as a string in the database.
    @Enumerated(EnumType.STRING)
    @Column(name = "anouncement")
    private NewsEnums.Anouncement anouncement;

    // The `@Column(name = "title")` annotation is used to specify the mapping of the `title` field to
    // a column in the database table. In this case, the column name in the database table will be
    // "title". This annotation is used in conjunction with the `@Entity` annotation to define the
    // mapping between the Java object and the database table.
    @Column(name = "title")
    private String title;

   // The `@Column(name = "description", columnDefinition = "LONGTEXT")` annotation is used to specify
   // the mapping of the `description` field to a column in the database table. In this case, the
   // column name in the database table will be "description".
    @Column(name = "description", columnDefinition = "LONGTEXT")
    private String description;

   // The `@Column(name = "body", columnDefinition = "LONGTEXT")` annotation is used to specify the
   // mapping of the `body` field to a column in the database table. In this case, the column name in
   // the database table will be "body".
    @Column(name = "body", columnDefinition = "LONGTEXT")
    private String body;

    // The `@OneToMany` annotation is used to define a one-to-many relationship between the `News`
    // entity and the `Photo` entity. It indicates that a single `News` entity can have multiple
    // `Photo` entities associated with it.
    @OneToMany(cascade = CascadeType.ALL)     
    @JoinColumn(name="news_Id")
    private List<Photo> photoReal = new ArrayList<>();

    public Integer getId() {
        return id;
    }
 
    public LocalDate getDatePublished() {
        return datePublished;
    }

    public void setDatePublished(LocalDate datePublished) {
        this.datePublished = datePublished;
    }

    public NewsEnums.Anouncement getAnouncement() {
        return anouncement;
    }

    public void setAnouncement(NewsEnums.Anouncement anouncement) {
        this.anouncement = anouncement;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public List<Photo> getPhotoReal() {
        return photoReal;
    }

    public void setPhotoReal(List<Photo> photoReal) {
        this.photoReal = photoReal;
    }
    

    
}
