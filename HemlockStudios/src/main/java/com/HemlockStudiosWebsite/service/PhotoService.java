/**
 * The PhotoService class is a service layer that provides methods for creating, saving, updating,
 * finding, and deleting Photo objects.
 */
package com.HemlockStudiosWebsite.service;
import com.HemlockStudiosWebsite.repo.PhotoRepo;
import com.HemlockStudiosWebsite.entity.Photo;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PhotoService {
    @Autowired
    private PhotoRepo photoRepo;


    /**
     * The function creates a new Photo object with a given photo URL and saves it to the photo
     * repository.
     * 
     * @param photoUrl The photoUrl parameter is a string that represents the URL or file path of the
     * photo that you want to create.
     * @return The method is returning a Photo object.
     */
    public Photo createPhoto(String photoUrl){
      Photo photo = new Photo();
      photo.setPhotoUrl(photoUrl);
      return photoRepo.save(photo);
    }
   /**
    * The save function saves a photo object and returns the saved photo with an autogenerated id.
    * 
    * @param photo The "photo" parameter is an object of the Photo class that you want to save.
    * @return The method is returning a saved instance of the Photo object.
    */
    public Photo save(Photo photo) {
	    return photoRepo.save(photo);
	}
	
	/**
     * The function updates a photo object in a repository if it exists, otherwise it throws an exception.
     * 
     * @param photo The "photo" parameter is an object of the Photo class.
     * @return The method is returning a Photo object.
     */
    public Photo update(Photo photo) throws Exception {

        if(photo.getId() != null) {
	        return photoRepo.save(photo);
        }

        throw new Exception("Object does not exist! id not present");
	}
    
    /**
     * The function findById takes an Integer photoId as input and returns the corresponding Photo
     * object if it exists in the photoRepo, otherwise it throws an Error.
     * 
     * @param photoId The parameter `photoId` is an Integer representing the unique identifier of a
     * photo.
     * @return The method is returning a Photo object.
     */
    public Photo findById(Integer photoId) throws Error {
    	
        if(photoRepo.findById(photoId).isPresent()) {
            return photoRepo.findById(photoId).get();
        }
        throw new Error("No Photo id present,");   
    }

	/**
     * The function returns a list of all photos.
     * 
     * @return The method is returning a List of Photo objects.
     */
    public List<Photo> findAll() {
		return photoRepo.findAll();
	}

    /**
     * The function deletes a photo from the repository based on its ID.
     * 
     * @param id The "id" parameter is an Integer that represents the unique identifier of the photo
     * that needs to be deleted.
     */
    public void deleteById(Integer id) {
	    photoRepo.deleteById(id);
	}

    /**
     * The function returns a list of photos associated with a given product ID.
     * 
     * @param productID The productID parameter is an Integer that represents the ID of a product.
     * @return The method is returning a List of Photo objects.
     */
    public List<Photo> findByProduct(Integer productID){
        return photoRepo.findByProductID(productID);
    }
}