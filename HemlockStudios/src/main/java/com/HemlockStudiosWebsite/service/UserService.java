package com.HemlockStudiosWebsite.service;

import com.HemlockStudiosWebsite.repo.UserRepo;
import com.HemlockStudiosWebsite.entity.Cart;
import com.HemlockStudiosWebsite.entity.CreditCard;
import com.HemlockStudiosWebsite.entity.Product;
import com.HemlockStudiosWebsite.entity.User;

import java.util.List;

import javax.security.auth.login.AccountNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;



@Service
public class UserService implements UserDetailsService{

    @Autowired
    UserRepo userRepo;

    @Autowired
    CartService cartService;

    @Autowired
    ProductService productService;

    @Autowired
    CreditCardService creditCardService;

    public User save(User user) {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

	    return userRepo.save(user);
	}
	
	public User update(User user) throws Exception {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

        if(user.getId() != null) {
	        return userRepo.save(user);
        }

        throw new AccountNotFoundException("Account does not exist! id not present");
	}
    
    public User findById(Integer userId) throws Error {
        
    	// Find by is another predefined repo function, you can always find by the primary key
    	// when you use findById, its good practice to use the isPresent in an if check first
    	// It will tell you if a object was actually found, with true or false values, true if found, false is not
    	// It will always return an Optional Object, the user will be there if found, null if not
    	// If found, give the object back with a .get() to grab it off the Optional object
    	
        if(userRepo.findById(userId).isPresent()) {
            return userRepo.findById(userId).get();
        }
        
        // if user is not present, throw error so front end can handle it
        throw new Error("No user id present, User not found, send an id billy, dumbass");
        
    }

	public User findByEmail(String email) {
		return userRepo.findByUserName(email);
	}

	public List<User> findAll() {
		return userRepo.findAll();
	}

    public User signIn(User user) throws Exception {
		
		User loggedInUser = userRepo.signIn(user.getEmail(), user.getPassword());
		if(loggedInUser == null) {
			throw new Exception("User was not found");
		}

		return loggedInUser;

	}

    public void deleteById(Integer id) {
	 
        userRepo.deleteById(id);
	}

    public List<User> getAll()
    {
        return userRepo.findAll();
    }

	public User findByUsername(String username) throws UsernameNotFoundException {
		return userRepo.findByUsername(username)
			.orElseThrow(() -> new UsernameNotFoundException("User not found"));
	}

    public void deleteUserById(Integer id) {
        User user = userRepo.findById(id).orElse(null);
    if (user != null) {
        
        List<Product> favoriteProducts = user.getFavoriteProducts();
        if (favoriteProducts != null) {
            favoriteProducts.clear();
            user.setFavoriteProducts(favoriteProducts);
            userRepo.save(user);
        }

        userRepo.deleteById(id);
    } else {
        throw new IllegalArgumentException("User not found.");
    }
    }


    public User updateUser(Integer id, String username, String email) {
        User user = userRepo.findById(id).orElse(null);
        
        user.setUsername(username);
        user.setEmail(email);
        return userRepo.save(user);
    }
    
    public Cart getCartByUserId(Integer id) {
        User user = userRepo.findById(id)
        .orElseThrow(() -> new RuntimeException("User not found with id"));
        return user.getCart();
    }

    public void addProductToFavorites(Integer userId, Integer productId) {
      User user = userRepo.findById(userId)
      .orElseThrow(() -> new RuntimeException("User not found"));

      Product product = productService.getProductById(productId);

      user.getFavoriteProducts().add(product);
      userRepo.save(user);
    }

    public void removeProductFromFavorites(Integer userId, Integer productId) {
        User user = userRepo.findById(userId)
        .orElseThrow(() -> new RuntimeException("User not found"));
  
        Product product = productService.getProductById(productId);
  
        user.getFavoriteProducts().remove(product);
        userRepo.save(user);
    }

    public User getUserById(Integer userId) {
        return userRepo.findById(userId)
        .orElseThrow(() -> new RuntimeException("User not found"));
    }

    public User addCreditCardToUser(Integer userId, String cardNumber, Integer expirationYear, Integer  expirationMonth, String cardHolderName, String cvv) {
        User user = userRepo.findById(userId)
        .orElseThrow(() -> new RuntimeException("User not found"));
    
        CreditCard savedCreditCard = creditCardService.createAndAddCreditCard(cardNumber, cardHolderName, expirationMonth, expirationYear, cvv);
    
        user.getWallet().add(savedCreditCard);
        return userRepo.save(user);
    }

    public void removeCreditCardFromUser(Integer userId, Integer creditCardId) {
        User user = userRepo.findById(userId)
        .orElseThrow(() -> new RuntimeException("User not found"));
    
        CreditCard creditCard = creditCardService.getCreditCardById(creditCardId);
    
        user.getWallet().remove(creditCard);
        userRepo.save(user);

        creditCardService.deleteCreditCardById(creditCardId);
    }


	@Override
public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
System.out.println("in the userdetail service");
return userRepo.findByUsername(username).orElseThrow(() -> new UsernameNotFoundException("user is not valid"));
}

}


