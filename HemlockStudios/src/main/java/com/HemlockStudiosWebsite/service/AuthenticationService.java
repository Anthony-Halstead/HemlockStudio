/**
 * The AuthenticationService class provides methods for user registration, email confirmation, and user
 * login.
 */
package com.HemlockStudiosWebsite.service;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import com.HemlockStudiosWebsite.entity.EmailVerificationToken;
import com.HemlockStudiosWebsite.entity.Role;
import com.HemlockStudiosWebsite.entity.User;
import com.HemlockStudiosWebsite.repo.RoleRepo;
import com.HemlockStudiosWebsite.repo.UserRepo;
import jakarta.transaction.Transactional;
@Service
@Transactional
public class AuthenticationService {
@Autowired
private UserRepo userRepo;
@Autowired
private RoleRepo roleRepo;
@Autowired
private PasswordEncoder passwordEncoder;
@Autowired
private AuthenticationManager authenticationManager;
@Autowired
private TokenService tokenService;
@Autowired
EmailVerificationTokenService emailVerificationTokenService;
@Autowired
EmailSenderService emailSenderService;


/**
 * The function registers a new user by encoding their password, assigning them a user role, and saving
 * their information in the user repository.
 * 
 * @param username The username is a String that represents the desired username for the user being
 * registered. It is used to uniquely identify the user in the system.
 * @param password The "password" parameter is the password that the user wants to set for their
 * account.
 * @param email The "email" parameter is a string that represents the email address of the user who is
 * registering.
 * @return The method is returning a User object.
 */
public User registerUser(String username, String password, String email){
    String encodedPassword = passwordEncoder.encode(password);
    Role userRole = roleRepo.findByAuthority("USER").get();
    Set<Role> authorities = new HashSet<>();
    authorities.add(userRole);

    User user = new User(0, username, encodedPassword, email, authorities);
    user.setEmailConfirmed(false);

    return userRepo.save(user);
}

/**
 * The function registers a new admin user by encoding the password, assigning admin and user roles,
 * and saving the user to the repository.
 * 
 * @param username The username is a String that represents the username of the admin user being
 * registered.
 * @param password The "password" parameter is the password that the admin wants to set for their
 * account.
 * @param email The "email" parameter is a String that represents the email address of the user being
 * registered as an admin.
 * @return The method is returning a User object.
 */
public User registerAdmin(String username, String password, String email){
    String encodedPassword = passwordEncoder.encode(password);
    Role adminRole = roleRepo.findByAuthority("ADMIN").get();
    Role userRole = roleRepo.findByAuthority("USER").get();
    Set<Role> authorities = new HashSet<>();
    authorities.add(adminRole);
    authorities.add(userRole);
    User user = new User(0, username, encodedPassword, email, authorities);
    user.setEmailConfirmed(true);
    user.setNotificationsEnabled(true);
    return userRepo.save(user);
}


/**
 * The function sends an email confirmation to a user with a unique token for email verification.
 * 
 * @param user The "user" parameter is an object of the User class, which represents a user in the
 * system. It contains information about the user, such as their email address.
 */
public void sendEmailConfirmation(User user) {
    String token = UUID.randomUUID().toString();
    EmailVerificationToken emailVerificationToken = emailVerificationTokenService.createToken(user, token);
    String confirmUrl = "https://hemlock-studio.com/auth/confirm?token=" + emailVerificationToken.getToken();
    emailSenderService.sendEmail(user.getEmail(), "Confirm your email", "Click this link to confirm your email: " + confirmUrl);
}


/**
 * The loginUser function authenticates the user's credentials, checks if their email is confirmed, and
 * generates a JWT token.
 * 
 * @param username The username parameter is the username entered by the user during the login process.
 * It is used to identify the user and retrieve their information from the database.
 * @param password The password parameter is the password entered by the user during the login process.
 * @return The method is returning a JWT (JSON Web Token) generated by the tokenService.
 */
public String loginUser(String username, String password){
    try{
        System.out.println("You are in the login user method");
        Authentication auth = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(username, password)
        );
        User user = userRepo.findByUsername(username).get();
        if (!user.getIsEmailConfirmed()) {
            throw new RuntimeException("Email not confirmed check your email and click on the link");
        }
        return tokenService.generateJwt(auth);
    }catch(AuthenticationException e){
        System.out.println(e.getMessage());
        throw e; 
    }
}
}